{
  "Nextjs Api route": {
    "prefix": "next:api",
    "body": [
      "export async function ${1|GET,POST,PATCH,PUT,DELETE|}(req: Request){",
      "\t$0",
      "}"
    ],
    "description": "Next Api Route"
  },
  "Nextjs Api response": {
    "prefix": "next:res",
    "body": [
      "return NextResponse.json(${0:data});"
    ],
    "description": "Next Api Route"
  },
  "Nextjs Api request handle": {
    "prefix": "req",
    "body": [
      "const ${0:data} = await req.json();"
    ],
    "description": "Next Api Route"
  },
  "Next Image Component": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "next:image",
    "body": [
      "<Image$1 src={`${2:${5:/public}/}`} alt='$0' width={${3:100}} height={${4:100}} />"
    ]
  },
  "Typescript layout": {
    "prefix": "next:layout:typescript",
    "scope": "typescriptreact",
    "body": [
      "export default function $1Layout({ children }: { children: React.ReactNode; }) {",
      "\treturn <>{children}</>",
      "}"
    ],
    "description": "Create a layout for this route"
  },
  "Layout": {
    "prefix": "next:layout:javascript",
    "scope": "javascript, javascriptreact",
    "body": [
      "export default function $1Layout({ children }) {",
      "\treturn <>{children}</>",
      "}"
    ],
    "description": "Create a layout for this route"
  },
  "Typescript Root Layout": {
    "prefix": "next:layout:root-typescript",
    "scope": "typescriptreact",
    "body": [
      "export default function RootLayout({ children }: { children: React.ReactNode; }) {",
      "\treturn (",
      "\t\t<html lang='en'>",
      "\t\t\t<body>{children}</body>",
      "\t\t</html>",
      "\t)",
      "}"
    ],
    "description": "Create a root layout"
  },
  "Root layout": {
    "prefix": "next:layout:root-javascript",
    "scope": "javascript, javascriptreact",
    "body": [
      "export default function RootLayout({ children }) {",
      "\treturn (",
      "\t\t<html lang='en'>",
      "\t\t\t<body>{children}</body>",
      "\t\t</html>",
      "\t)",
      "}"
    ],
    "description": "Create a root layout"
  },
  "Loading": {
    "prefix": "next:loading",
    "body": [
      "export default function $1Loading() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create a loading UI for this route"
  },
  "Error": {
    "prefix": "next:error",
    "body": [
      "'use client'",
      "",
      "export default function $1Error() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create an error UI for this route"
  },
  "Not found": {
    "prefix": "next:notfound",
    "body": [
      "export default function $1NotFound() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create a not found UI for this route"
  },
  "Styled JSX Importer": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "next:jsx",
    "body": [
      "",
      "<style jsx>",
      "  {`",
      "    .${1:ClassName}{",
      "      @apply ${0}",
      "    }",
      "  `}",
      "</style>",
      ""
    ],
    "description": "Use Styled JSX!"
  },
  "use client": {
    "prefix": "uc",
    "body": "'use client'",
    "description": "add use client"
  },
  "use server": {
    "prefix": "us",
    "body": "'use server'",
    "description": "add use server"
  },
  "Remote Image": {
    "scope": "javascript,typescript",
    "prefix": "next:remote:image",
    "body": [
      "images: {",
      "  remotePatterns: [",
      "    {",
      "      protocol: 'https',",
      "      hostname: '$0',",
      "    },",
      "  ],",
      "},"
    ]
  },
  "local fonts": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "next:localfont",
    "body": [
      "import localFont from 'next/font/local'",
      " ",
      "const myFont = localFont({",
      "  src: '.$0',",
      "  display: 'swap',",
      "  variable: '--my-font',",
      "})"
    ]
  },
  "Metadata": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "next:metadata",
    "body": [
      "export const metadata = {",
      "  title: '$0',",
      "};"
    ]
  },
  "generateStaticParams": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "next:generateStaticParams",
    "body": [
      "export async function generateStaticParams() {",
      "  return data.map((el) => ({",
      "    slug: el,",
      "  }))",
      "}"
    ]
  },
  "generateMetadata": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "next:generateMetadata",
    "body": [
      "export async function generateMetadata({ params: {slug} }: PageProps) {",
      "  return {",
      "    title: slug,",
      "  }",
      "}"
    ]
  },
  "Force dynamic": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "next:dynamic",
    "body": [
      "export const dynamic = 'force-dynamic';"
    ]
  },
  "Force static": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "next:static",
    "body": [
      "export const dynamic = 'force-static';"
    ]
  },
  "Revalidate": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "next:revalidate",
    "body": [
      "export const revalidate = 60"
    ]
  },
  "Regular Function": {
    "prefix": "fun",
    "body": [
      "function ${1/(.*)/${1:/camelcase}/g}(){",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a Function"
  },
  "Async Regular Function": {
    "prefix": [
      "fun:export",
      "efun"
    ],
    "body": [
      "export function ${1/(.*)/${1:/camelcase}/g}(){",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a Function"
  },
  "Export Regular Function": {
    "prefix": [
      "fun:export",
      "efun"
    ],
    "body": [
      "export function ${1/(.*)/${1:/camelcase}/g}(){",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a Function"
  },
  "Anonymous ArrowFunction": {
    "prefix": [
      "fn"
    ],
    "body": [
      "($1) => $0"
    ],
    "description": "Creates an Anonymous Arrow Function with ES7 module system"
  },
  "Normal ArrowFunction": {
    "prefix": "fn:define",
    "body": [
      "const ${1/(.*)/${1:/camelcase}/g} = () => {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function with ES7 module system"
  },
  "Async ArrowFunction": {
    "prefix": "fn:async",
    "body": [
      "const ${1/(.*)/${1:/camelcase}/g} = async () => {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function with ES7 module system"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": [
      "console.log(${1:first})"
    ],
    "description": "Displays a message in the console"
  },
  "Check Server of browser": {
    "prefix": "isWindow",
    "body": [
      "typeof window !== 'undefined'"
    ]
  },
  "IIFE": {
    "prefix": "iife",
    "body": [
      "(async () => {$0})();"
    ]
  },
  "exportDefault": {
    "prefix": "exp:default",
    "body": [
      "export default ${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}}"
    ]
  },
  "exportNamed": {
    "prefix": "exp:named",
    "body": [
      "export {${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}}}"
    ]
  },
  "importDefault": {
    "prefix": "imp:default",
    "body": [
      "import ${2:name} from '${1:loc}'"
    ]
  },
  "importNamed": {
    "prefix": "imp:named",
    "body": [
      "import {${2:name}} from '${1:loc}'"
    ]
  },
  "importLazy": {
    "prefix": "imp:lazy",
    "body": [
      "const ${2:name} = lazy(() => import('${1:loc}'));"
    ]
  },
  "MaxLength Checker": {
    "prefix": "maxlength-checker",
    "body": [
      "// maxLength={1}",
      "// onInput={(e) => maxLengthCheck(e)}",
      "export const maxLengthCheck = (object: any) => {",
      "  if (object.target.value.length > object.target.maxLength) {",
      "    object.target.value = object.target.value.slice(0, object.target.maxLength);",
      "  }",
      "};"
    ]
  },
  "Random Number": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "random-number",
    "body": [
      "Math.round(Math.random() * 10)"
    ]
  },
  "Sleep/Wait Promise": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "sleep",
      "wait"
    ],
    "body": [
      "export const sleep = (ms: number = 1000) => new Promise((resolve) => setTimeout(resolve, ms));"
    ]
  },
  "Random String": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "random-string",
    "body": [
      "Math.random().toString(36).substring(0,12).slice(2)"
    ],
    "description": "8 Digit string"
  },
  "Random Color": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "random-color",
    "body": [
      "\"#\" + Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, '0')"
    ]
  },
  "type / interface Prop": {
    "scope": "typescript, typescriptreact",
    "prefix": "type:interface",
    "body": [
      "interface ${1/(.*)/${1:/pascalcase}/}Props {",
      "\treadonly children?: React.ReactNode;",
      "\tclassName: string;$0",
      "}"
    ]
  },
  "Copy2Clipboard": {
    "scope": "typescriptreact,javascript,javascriptreact,typescript",
    "prefix": "copy2clipboard",
    "body": [
      "const copyToClipboard = (text: string) => {",
      "  const el = document.createElement('textarea');",
      "  el.value = text;",
      "  document.body.appendChild(el);",
      "  el.select();",
      "  document.execCommand('copy');",
      "  document.body.removeChild(el);",
      "};"
    ]
  },
  "Download": {
    "scope": "typescript,javascript, typescriptreact,javascriptreact",
    "prefix": [
      "download",
      "handleDownload"
    ],
    "body": [
      "function handleDownload(url:string) {",
      "  fetch(url, {",
      "    method: 'GET',",
      "  })",
      "    .then((response) => {",
      "      response.arrayBuffer().then(function (buffer) {",
      "        const url = window.URL.createObjectURL(new Blob([buffer]));",
      "        const link = document.createElement('a');",
      "        link.href = url;",
      "        link.setAttribute('download', 'pool-designer.png');",
      "        document.body.appendChild(link);",
      "        link.click();",
      "      });",
      "    })",
      "    .catch((err) => {",
      "      console.log(err);",
      "    });",
      "}"
    ]
  },
  "convertBase64ToImageURL": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "convertBase64ToImageURL",
    "body": [
      "function convertBase64ToImageURL(base64String: string): string {",
      "  const byteCharacters = atob(base64String);",
      "  const byteNumbers = new Array(byteCharacters.length);",
      "",
      "  for (let i = 0; i < byteCharacters.length; i++) {",
      "    byteNumbers[i] = byteCharacters.charCodeAt(i);",
      "  }",
      "",
      "  const byteArray = new Uint8Array(byteNumbers);",
      "  const blob = new Blob([byteArray], { type: 'image/png' });",
      "  const imageUrl = URL.createObjectURL(blob);",
      "",
      "  return imageUrl;",
      "}"
    ]
  },
  "convertImageToBase64": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "convertImageToBase64",
    "body": [
      "function convertImageToBase64(file: File): Promise<string> {",
      "  return new Promise((resolve, reject) => {",
      "    if (file.type.startsWith('image/')) {",
      "      const reader = new FileReader();",
      "",
      "      reader.onload = function () {",
      "        const base64String = reader.result?.toString().split(',')[1] || '';",
      "        resolve('data:image/png;base64,' + base64String);",
      "      };",
      "",
      "      reader.readAsDataURL(file);",
      "    } else {",
      "      reject(new Error('Selected file is not an image.'));",
      "    }",
      "  });",
      "}"
    ]
  },
  "fetch api - await/async": {
    "prefix": "fetch:await",
    "body": [
      "const res = await fetch(${1:URL})",
      "const data = await res.json()"
    ]
  },
  "fetch api - thenable": {
    "prefix": "fetch:then",
    "body": [
      "fetch(${1:URL}, {",
      "\tmethod: \"${2:POST}\",",
      "\theaders: {",
      "\t\t\"Content-Type\": \"application/json\",",
      "\t},",
      "\tbody: JSON.stringify(${3:data}),",
      "})",
      ".then((res) => res.json())",
      ".then((data) => console.log(data));"
    ]
  },
  "React Stateless": {
    "prefix": "rsc:default-export",
    "body": [
      "export const metadata = {",
      "  title: '${2:${TM_DIRECTORY/^.+\\/(.*)/${1:/pascalcase}/g}}',",
      "};",
      "",
      "export default function ${1:${TM_DIRECTORY/^.+\\/(.*)/${1:/pascalcase}/g}${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {\n\treturn (\n\t\t<main>\n\t\t\t${TM_DIRECTORY/^.+\\/(.*)/${1:/pascalcase}/g}${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}$0\n\t\t</main>\n\t);\n}"
    ],
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "ArrowFunctionComponent": {
    "scope": "javascript,javascriptreact,typescriptreact",
    "prefix": "rsc:arrow",
    "body": [
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = () => {",
      "  return (",
      "    <div>$0</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "Component with children": {
    "scope": "javascript,javascriptreact,typescriptreact",
    "prefix": "rsc:provider",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}({children}: {children: React.ReactNode}){",
      "return <>{children}</>;",
      "}",
      ""
    ],
    "description": "Creates a Functional Component with children"
  },
  "ui-components-with-ref": {
    "scope": "typescriptreact",
    "prefix": "rsc:ui:ref",
    "body": [
      "",
      "import { HtmlHTMLAttributes, forwardRef } from 'react';",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}Props = ComponentPropsWithRef<'div'>;",
      "",
      "const $1 = forwardRef<HTML${2:DivElement}, $1Props>(",
      "  ({ className, ...props }, ref) => {",
      "    return <div ref={ref} {...props} className={cn(className)}$0/>;",
      "  }",
      ");",
      "",
      "$1.displayName = '$1';",
      "export { $1 };",
      ""
    ],
    "description": "Creates a stateless React UI component and ES6 module system"
  },
  "ui-components": {
    "scope": "typescriptreact",
    "prefix": "rsc:ui",
    "body": [
      "import { ComponentProps } from 'react';",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}Props = ComponentProps<'div'>;",
      "",
      "export function $1({",
      "  className,",
      "  ...props",
      "}: $1Props ) {",
      "  return (",
      "    <div className={cn(className)} {...props}>",
      "      $0",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Creates a stateless React UI component and ES6 module system"
  },
  "useHook": {
    "prefix": "ruhook",
    "body": [
      "const {$2} = use$1($0);"
    ],
    "description": "React use() hook"
  },
  "reactCustomHook": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "rchook",
    "body": " const use${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = () => {\n\t$0\n};\n\nexport default use$1;",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "reactCustomUpdateHook": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "rcupdatehook",
    "body": [
      "import { useRef, useEffect } from 'react';",
      "",
      "export default function useUpdateEffect(effect: () => any, deps: any[]) {",
      "  const isInitialMount = useRef(true);",
      "",
      "  useEffect(() => {",
      "    if (isInitialMount.current) {",
      "      isInitialMount.current = false;",
      "    } else {",
      "      return effect();",
      "    }",
      "  }, deps);",
      "}"
    ],
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "useState": {
    "prefix": "rustate",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
    ]
  },
  "useEffect": {
    "prefix": "rueffect",
    "body": [
      "useEffect$1(() => {",
      "  ${2}",
      "}, [${3}])",
      ""
    ]
  },
  "useLayoutEffect": {
    "prefix": "rulayouteffect",
    "body": [
      "useLayoutEffect$1(() => {",
      "  ${2}",
      "}, [${3}])",
      ""
    ]
  },
  "useRef": {
    "prefix": "ruref",
    "body": [
      "const ${1} = useRef(null)"
    ]
  },
  "useTransition": {
    "prefix": "rutransition",
    "body": [
      "const [, startTransition] = useTransition()"
    ]
  },
  "useDeferredValue": {
    "prefix": "rudeferredvalue",
    "body": [
      "const deferred${1} = useDeferredValue(${1/(.*)/${1:/capitalize}/})"
    ]
  },
  "useReducer": {
    "prefix": "rureducer",
    "body": [
      "const [state, dispatch] = useReducer((state, action) => {",
      "\treturn [...state]",
      "}, {})"
    ]
  },
  "createContext": {
    "prefix": "rccontext:simple",
    "body": [
      "import { createContext, useContext } from \"react\";",
      "const ${1:Name} = createContext();",
      "export const use${1:Name} = () => useContext(${1:Name});$0"
    ]
  },
  "extended createContext with custom hook": {
    "prefix": "rccontext:extended",
    "body": [
      "import React, { ReactNode, createContext, useContext } from 'react';",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}Type = {$0};",
      "",
      "const $1Context = createContext<$1Type>({} as $1Type);",
      "",
      "const use$1Context = (): $1Type => {",
      "  const context = useContext($1Context);",
      "",
      "  if (context) return context;",
      "  throw new Error('use$1Context must be used within a $1Provider');",
      "};",
      "",
      "type ProviderType = {",
      "  children: ReactNode;",
      "  value: $1Type;",
      "};",
      "",
      "const $1Provider = ({ children, value }: ProviderType) => (",
      "  <$1Context.Provider value={value}>{children}</$1Context.Provider>",
      ");",
      "",
      "export { $1Provider, use$1Context };"
    ]
  },
  "useContext": {
    "prefix": "rucontext",
    "body": [
      "const ${1:first} = useContext(${2:second})"
    ]
  },
  "useMemo": {
    "prefix": "rumemo",
    "body": [
      "const ${1:data} = useMemo(() => {",
      "\t",
      "} , [])"
    ]
  },
  "useCallback": {
    "prefix": "rumemo",
    "body": [
      "const ${1:handle} = useCallback(() => {",
      "\t",
      "} , [])"
    ]
  },
  "isNavActive": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "isNavActive",
    "body": [
      "export function isNavActive(href: string, path: string) {",
      "  return href === '/' ? path === '/' : path?.includes(href);",
      "}"
    ]
  },
  "Props with children": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "props:children",
    "body": [
      "{ children$0 }:{ children: React.ReactNode$1}"
    ]
  },
  "Props with className": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "props:className",
    "body": [
      "{ className$0, ...props }: HTMLAttributes<HTMLDivElement>"
    ]
  },
  "Props": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "props",
    "body": [
      "{ $0 }:{ $1 }"
    ]
  },
  "cn for className": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "cn",
    "body": [
      "className={cn$1('$0', {})}"
    ]
  }
}