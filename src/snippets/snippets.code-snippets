{
  /* --------------------------------------------------------------------- */
  /* --------------------- React Hooks Code Snippets --------------------- */
  /* --------------------------------------------------------------------- */
  "useHook": {
    "prefix": "ruhook",
    "body": ["const $2 = use$1($0);"],
    "description": "React use() hook"
  },
  // react hooks components usage.
  "useState": {
    "prefix": "rustate",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState$0(${2})"
    ]
  },
  "useEffect": {
    "prefix": "rueffect",
    "body": [
      "useEffect$0(() => {",
      "  ${1}",
      "",
      "  return () => {",
      "    ${2}",
      "  }",
      "}, [${3}])",
      ""
    ]
  },
  "useRef": {
    "prefix": "ruref",
    "body": ["const ${1} = useRef$0(${2:null})"]
  },
  "useTransition": {
    "prefix": "rutransition",
    "body": ["const [isPending, startTransition] = useTransition$0()"]
  },
  "useReducer": {
    "prefix": "rureducer",
    "body": [
      "const [state, dispatch] = useReducer$0(${1:first}, ${2:second}, ${3:third})"
    ]
  },

  "createContext": {
    "prefix": "rccontext",
    "body": [
      "import { createContext, useContext } from \"react\";",
      "const ${1:Name} = createContext$0();",
      "export const use${1:Name} = () => useContext(${1:Name});$0"
    ]
  },
  "useContext": {
    "prefix": "rucontext",
    "body": ["const ${1:first} = useContext$0(${2:second})"]
  },
  "useMemo": {
    "prefix": "rumemo",
    "body": ["useMemo$0(() => ${1:first}, [${2:second}])"]
  },
  /* ---------------------------- react query ---------------------------- */
  "react query": {
    "prefix": "ruquery",
    "body": ["const { data$4 } = useQuery$1(['$2'], () => $3);"]
  },

  /* -------------------------- react redux hook ------------------------- */
  "redux useSelector": {
    "prefix": "ruselector",
    "body": ["const ${0:state} = useSelector((state: RootState) => state$1)"]
  },
  "redux useDispatch": {
    "prefix": "rudispatch",
    "body": ["const dispatch = useDispatch()"]
  },
  /* --------------------------------------------------------------------- */
  /* ------------------- React Hooks Code Snippets End ------------------- */
  /* --------------------------------------------------------------------- */

  /* ---------------------- next js 13 code snippets --------------------- */

  "nextStateless": {
    "prefix": "nsc",
    "body": "export default function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {\n\treturn (\n\t\t<>\n\t\t\t$0\n\t\t</>\n\t);\n};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "use client": {
    "prefix": "uc",
    "body": "'use client'",
    "description": "add use client"
  },

  "Typescript layout": {
    "prefix": "nlayout:typescript",
    "body": [
      "export default function $1Layout({ children }: { children: React.ReactNode; }) {",
      "\treturn children",
      "}"
    ],
    "description": "Create a layout for this route"
  },
  "Layout": {
    "prefix": "nlayout:javascript",
    "body": [
      "export default function $1Layout({ children }) {",
      "\treturn children",
      "}"
    ],
    "description": "Create a layout for this route"
  },
  "Page": {
    "prefix": "page",
    "body": [
      "export default function $1Page() {",
      "\treturn (",
      "\t\t$2)",
      "}"
    ],
    "description": "Create a page"
  },

  "Typescript Root Layout": {
    "prefix": "nlayout:root-typescript",
    "body": [
      "export default function RootLayout({ children }: { children: React.ReactNode; }) {",
      "\treturn (",
      "\t\t<html lang='en'>",
      "\t\t\t<body>{children}</body>",
      "\t\t</html>",
      "\t)",
      "}"
    ],
    "description": "Create a root layout"
  },
  "Root layout": {
    "prefix": "nlayout:root-javascript",
    "body": [
      "export default function RootLayout({ children }) {",
      "\treturn (",
      "\t\t<html lang='en'>",
      "\t\t\t<body>{children}</body>",
      "\t\t</html>",
      "\t)",
      "}"
    ],
    "description": "Create a root layout"
  },
  "Loading": {
    "prefix": "nloading",
    "body": [
      "export default function $1Loading() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create a loading UI for this route"
  },
  "Error": {
    "prefix": "nerror",
    "body": [
      "'use client'",
      "",
      "export default function $1Error() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create an error UI for this route"
  },

  "Not found": {
    "prefix": "nnotfound",
    "body": [
      "export default function $1NotFound() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create a not found UI for this route"
  },

  "Nextjs Api route": {
    "prefix": "napi",
    "body": [
      "export async function ${1|GET,POST,PATCH,PUT,DELETE|}(req: Request){",
      "\t$0",
      "}"
    ],

    "description": "Next Api Route"
  },
  "Nextjs Api response": {
    "prefix": "nres",
    "body": ["return NextResponse.json(${0:data});"],

    "description": "Next Api Route"
  }

  /* ----------------------- next 13 extension end ----------------------- */
}
