{
  /* --------------------------------------------------------------------- */
  /* --------------------- React Hooks Code Snippets --------------------- */
  /* --------------------------------------------------------------------- */
  "useHook": {
    "prefix": "ruhook",
    "body": ["const $2 = use$1($0);"],
    "description": "React use() hook"
  },

  "reactCustomHook": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "rchook",
    "body": " const ${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}} = () => {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  // react hooks components usage.
  "useState": {
    "prefix": "rustate",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2})"
    ]
  },
  "useEffect": {
    "prefix": "rueffect",
    "body": [
      "useEffect(() => {",
      "  ${1}",
      "",
      "  return () => {",
      "    ${2}",
      "  }",
      "}, [${3}])",
      ""
    ]
  },
  "useRef": {
    "prefix": "ruref",
    "body": ["const ${1} = useRef(${2:null})"]
  },
  "useTransition": {
    "prefix": "rutransition",
    "body": ["const [isPending, startTransition] = useTransition()"]
  },
  "useReducer": {
    "prefix": "rureducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ]
  },

  "createContext": {
    "prefix": "rccontext",
    "body": [
      "import { createContext, useContext } from \"react\";",
      "const ${1:Name} = createContext();",
      "export const use${1:Name} = () => useContext(${1:Name});$0"
    ]
  },
  "useContext": {
    "prefix": "rucontext",
    "body": ["const ${1:first} = useContext(${2:second})"]
  },
  "useMemo": {
    "prefix": "rumemo",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"]
  },

  /* --------------------------------------------------------------------- */
  /* ------------------- React Hooks Code Snippets End ------------------- */
  /* --------------------------------------------------------------------- */

  /* --------------------------------------------------------------------- */
  /* -------------------------- React Components ------------------------- */
  /* --------------------------------------------------------------------- */
  "React Stateless": {
    "prefix": "rsc:default-export",
    "body": "export default function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {\n\treturn (\n\t\t<>\n\t\t\t$0\n\t\t</>\n\t);\n};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },

  "ArrowFunctionComponent": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "rsc:no-export",
    "body": [
      "const ${1/(.*)/${1:/pascalcase}/g} = () => {",
      "  return (",
      "    <>${0}</>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "ArrowFunctionComponentExport": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "rsc:named-export",
    "body": [
      "export const ${1/(.*)/${1:/pascalcase}/g} = () => {",
      "  return (",
      "    <>${0}</>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },

  /* --------------------------------------------------------------------- */
  /* ------------------------ React Components End ----------------------- */
  /* --------------------------------------------------------------------- */

  /* --------------------------------------------------------------------- */
  /* ---------------------- next js 13 code snippets --------------------- */
  /* --------------------------------------------------------------------- */

  "use client": {
    "prefix": "uc",
    "body": "'use client'",
    "description": "add use client"
  },

  "use server": {
    "prefix": "us",
    "body": "'use server'",
    "description": "add use server"
  },

  "Typescript layout": {
    "prefix": "nlayout:typescript",
    "body": [
      "export default function $1Layout({ children }: { children: React.ReactNode; }) {",
      "\treturn children",
      "}"
    ],
    "description": "Create a layout for this route"
  },
  "Layout": {
    "prefix": "nlayout:javascript",
    "body": [
      "export default function $1Layout({ children }) {",
      "\treturn children",
      "}"
    ],
    "description": "Create a layout for this route"
  },
  "Typescript Root Layout": {
    "prefix": "nlayout:root-typescript",
    "body": [
      "export default function RootLayout({ children }: { children: React.ReactNode; }) {",
      "\treturn (",
      "\t\t<html lang='en'>",
      "\t\t\t<body>{children}</body>",
      "\t\t</html>",
      "\t)",
      "}"
    ],
    "description": "Create a root layout"
  },
  "Root layout": {
    "prefix": "nlayout:root-javascript",
    "body": [
      "export default function RootLayout({ children }) {",
      "\treturn (",
      "\t\t<html lang='en'>",
      "\t\t\t<body>{children}</body>",
      "\t\t</html>",
      "\t)",
      "}"
    ],
    "description": "Create a root layout"
  },
  "Loading": {
    "prefix": "nloading",
    "body": [
      "export default function $1Loading() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create a loading UI for this route"
  },
  "Error": {
    "prefix": "nerror",
    "body": [
      "'use client'",
      "",
      "export default function $1Error() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create an error UI for this route"
  },

  "Not found": {
    "prefix": "nnotfound",
    "body": [
      "export default function $1NotFound() {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}"
    ],
    "description": "Create a not found UI for this route"
  },

  "Styled JSX Importer": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "njsx",
    "body": [
      "",
      "<style jsx>",
      "  {`",
      "    .${1:ClassName}{",
      "      @apply ${0}",
      "    }",
      "  `}",
      "</style>",
      ""
    ],
    "description": "Use Styled JSX!"
  },
  "Nextjs Api route": {
    "prefix": "napi",
    "body": [
      "export async function ${1|GET,POST,PATCH,PUT,DELETE|}(req: Request){",
      "\t$0",
      "}"
    ],

    "description": "Next Api Route"
  },
  "Nextjs Api response": {
    "prefix": "nres",
    "body": ["return NextResponse.json(${0:data});"],

    "description": "Next Api Route"
  },
  "Nextjs Api request handle": {
    "prefix": "nreq",
    "body": ["const ${0:data} = await req.json();"],

    "description": "Next Api Route"
  },

  /* --------------------------------------------------------------------- */
  /* ----------------------- next 13 extension end ----------------------- */
  /* --------------------------------------------------------------------- */

  /* --------------------------------------------------------------------- */
  /* --------------------- Bonus: Javascript Snippets -------------------- */
  /* --------------------------------------------------------------------- */

  //Emon: Snippet for normal usage. ðŸš€ðŸš€ðŸš€

  "Regular Function": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fun",
    "body": ["function ${1/(.*)/${1:/camelcase}/g}(){", "  ${0}", "}", ""],
    "description": "Creates a Function"
  },
  "Async Regular Function": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fun:async",
    "body": [
      "async function ${1/(.*)/${1:/camelcase}/g}(){",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a Function"
  },
  "Normal ArrowFunction": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fn",
    "body": ["const ${1/(.*)/${1:/camelcase}/g} = () => {", "  ${0}", "}", ""],
    "description": "Creates a React Arrow Function with ES7 module system"
  },
  "Async ArrowFunction": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fn:async",
    "body": [
      "const ${1/(.*)/${1:/camelcase}/g} = async () => {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function with ES7 module system"
  },
  "Anonymous ArrowFunction": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fn:anonymous",
    "body": ["($1) => $0"],
    "description": "Creates an Anonymous Arrow Function with ES7 module system"
  },

  "consoleLog": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "clg",
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console"
  },

  /* ------------------------- export and import ------------------------- */

  "exportDefault": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "exp:default",
    "body": ["export default ${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}}"]
  },
  "exportNamed": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "exp:named",
    "body": ["export {${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/g}}}"]
  },
  "importDefault": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "imp:default",
    "body": ["import ${2:name} from '${1:loc}'"]
  },
  "importNamed": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "imp:named",
    "body": ["import {${2:name}} from '${1:loc}'"]
  },
  "importLazy": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "imp:lazy",
    "body": ["const ${2:name} = lazy(() => import('${1:loc}'));"]
  },

  // api related
  "fetch api - await/async": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fetch:await",
    "body": [
      "const res = await fetch(${1:URL}, {",
      "\tmethod: \"${2:POST}\",",
      "\theaders: {",
      "\t\t\"Content-Type\": \"application/json\",",
      "\t},",
      "\tbody: JSON.stringify(${3:data}),",
      "})",
      "const data = await res.json()",
    ]
  },
  "fetch api - thenable": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "fetch:then",
    "body": [
      "fetch(${1:URL}, {",
      "\tmethod: \"${2:POST}\",",
      "\theaders: {",
      "\t\t\"Content-Type\": \"application/json\",",
      "\t},",
      "\tbody: JSON.stringify(${3:data}),",
      "})",
      ".then((res) => res.json())",
      ".then((data) => console.log(data));"
    ]
  }
  /* --------------------------------------------------------------------- */
  /* ---------------------- Javascript Snippets End ---------------------- */
  /* --------------------------------------------------------------------- */
}
