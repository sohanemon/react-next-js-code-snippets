{
  "useHook": {
    "prefix": "ruhook",
    "body": ["const {$2} = use$1($0);"],
    "description": "React use() hook"
  },

  "reactCustomHook": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "rchook",
    "body": " const use${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = () => {\n\t$0\n};\n\nexport default use$1;",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },

  "reactCustomUpdateHook": {
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "prefix": "rcupdatehook",
    "body": [
      "import { useRef, useEffect } from 'react';",
      "",
      "export default function useUpdateEffect(effect: () => any, deps: any[]) {",
      "  const isInitialMount = useRef(true);",
      "",
      "  useEffect(() => {",
      "    if (isInitialMount.current) {",
      "      isInitialMount.current = false;",
      "    } else {",
      "      return effect();",
      "    }",
      "  }, deps);",
      "}"
    ],
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "useState": {
    "prefix": "rustate",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"]
  },
  "useEffect": {
    "prefix": "rueffect",
    "body": ["useEffect$1(() => {", "  ${2}", "}, [${3}])", ""]
  },
  "useLayoutEffect": {
    "prefix": "rulayouteffect",
    "body": ["useLayoutEffect$1(() => {", "  ${2}", "}, [${3}])", ""]
  },
  "useRef": {
    "prefix": "ruref",
    "body": ["const ${1} = useRef(null)"]
  },
  "useTransition": {
    "prefix": "rutransition",
    "body": ["const [, startTransition] = useTransition()"]
  },
  "useDeferredValue": {
    "prefix": "rudeferredvalue",
    "body": [
      "const deferred${1} = useDeferredValue(${1/(.*)/${1:/capitalize}/})"
    ]
  },
  "useReducer": {
    "prefix": "rureducer",
    "body": [
      "const [state, dispatch] = useReducer((state, action) => {",
      "\treturn state",
      "}, {})"
    ]
  },
  "createContext": {
    "prefix": "rccontext:simple",
    "body": [
      "import { createContext, useContext } from \"react\";",
      "const ${1:Name} = createContext();",
      "export const use${1:Name} = () => useContext(${1:Name});$0"
    ]
  },
  "extended createContext with custom hook": {
    "prefix": "rccontext:extended",
    "body": [
      "import React, { ReactNode, createContext, useContext } from 'react';",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}Type = {$0};",
      "",
      "const $1Context = createContext<$1Type>({} as $1Type);",
      "",
      "const use$1Context = (): $1Type => {",
      "  const context = useContext($1Context);",
      "",
      "  if (context) return context;",
      "  throw new Error('use$1Context must be used within a $1Provider');",
      "};",
      "",
      "type ProviderType = {",
      "  children: ReactNode;",
      "  value: $1Type;",
      "};",
      "",
      "const $1Provider = ({ children, value }: ProviderType) => (",
      "  <$1Context.Provider value={value}>{children}</$1Context.Provider>",
      ");",
      "",
      "export { $1Provider, use$1Context };"
    ]
  },
  "useContext": {
    "prefix": "rucontext",
    "body": ["const ${1:first} = useContext(${2:second})"]
  },
  "useMemo": {
    "prefix": "rumemo",
    "body": ["const ${1:data} = useMemo(() => {", "\t", "} , [])"]
  },
  "useCallback": {
    "prefix": "rumemo",
    "body": ["const ${1:handle} = useCallback(() => {", "\t", "} , [])"]
  }
}
